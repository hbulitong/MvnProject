<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns= "http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd ">

    <context:annotation-config />
    <!-- 自动扫描web包 ,将带有注解的类 纳入spring容器管理 -->  
    <context:component-scan base-package="com"></context:component-scan>  
    <!-- 拦截器配置 -->
    <!-- path="/**",是拦截的所有文件夹，包括子文件夹 -->
    <mvc:interceptors>
    	<mvc:interceptor>
    		<mvc:mapping path="/**"/>
    		<bean class="interceptor.EncryptionInterceptor"></bean>
    	</mvc:interceptor>
    
    </mvc:interceptors>
    <!-- 获取配置文件 -->
 	<bean id="config" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
 		 <property name="locations"> 
         	<list> 
    			<value>classpath:db-config.properties</value> 
    			<value>classpath:kafka.properties</value> 
  		 	</list> 
  		</property> 
 	</bean> 
    <!-- 配置数据源 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
  		<property name="driverClassName"> 
  			<value>${db.dirverClass}</value> 
  		</property> 
  		<property name="url"> 
   			<value>${db.url}</value> 
  		</property> 
  		<property name="username"> 
   			<value>${db.username}</value> 
  		</property> 
  		<property name="password"> 
   			<value>${db.password}</value> 
  		</property> 
 	</bean> 
 	<!-- 配置事务，暂时采用默认配置 -->
 	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--事务模板 -->
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager"/>
		<!--ISOLATION_DEFAULT 表示由使用的数据库决定  -->
		<property name="isolationLevelName" value="ISOLATION_DEFAULT"/>
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
  		<property name="timeout" value="30"/>
	</bean>
	<!-- mybatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource"/>  
        <property name="mapperLocations">
        	<array>
        		<value>classpath:mapper/xml/*.xml</value>
        	</array>
        </property>  
    </bean> 
    <!-- 扫描mapper接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<property name="SqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
  		<property name="basePackage" value="com.mapper" />
	</bean>  
	<!-- 采用SqlSessionTemplate 统一配置方式 -->
	<bean id="sqlsessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 配置统一工具类 -->
	<bean id="mybatisDao" class="com.base.dao.BaseMybatisDao">
		<property name="sqlsession" ref="sqlsessionTemplate"></property>
	</bean>
	<!-- 引入kafka 生产者和消费者配置 -->
	<import resource="consumer-kafka.xml"/>
	<import resource="producer-kafka.xml"/>
	
</beans>
